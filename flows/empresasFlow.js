/**
 * Flujo de empresas
 */
const { addKeyword } = require('@bot-whatsapp/bot');
const { applyRandomDelay } = require('../utils/delay');
const antibanUtils = require('../utils/antibanUtils');

/**
 * Crea el flujo de empresas
 * @param {Object} provider - Proveedor de WhatsApp
 * @returns {Object} Flujo de empresas configurado
 */
const createEmpresasFlow = (provider) => {
  // Usamos una palabra clave espec√≠fica para este flujo
  return addKeyword(['empresas', 'empresa', 'negocios', 'negocio', 'corporativo'])
    // Primer paso: Mostrar el mensaje de bienvenida y el men√∫
    .addAction(async (ctx, { flowDynamic }) => {
      try {
        console.log('Entrando al flujo de empresas - Paso 1');
        const chatId = ctx.from;
        
        // Verificar si es seguro enviar un mensaje (anti-ban)
        if (!(await antibanUtils.isSafeToSendMessage(chatId))) {
          console.log('No es seguro enviar mensaje, saltando respuesta');
          return;
        }
        
        // Enviar mensaje inicial del flujo de empresas
        await applyRandomDelay(async () => {
          await flowDynamic(antibanUtils.sanitizeMessage('üè¢ *SECCI√ìN DE EMPRESAS* üè¢\n\nBienvenido a nuestra secci√≥n especializada para empresas. Aqu√≠ encontrar√°s informaci√≥n sobre nuestros servicios corporativos.'));
        });
        
        // Registrar mensaje enviado
        await antibanUtils.registerMessageSent(chatId);
        
        // Esperar un momento antes de mostrar el men√∫
        await new Promise(resolve => setTimeout(resolve, 1500));
      } catch (error) {
        console.error('Error en el flujo de empresas (paso 1):', error);
      }
    })
    // Segundo paso: Mostrar el men√∫ de opciones
    .addAnswer('Por favor, selecciona una opci√≥n:\n\n*1*. Servicios para empresas\n*2*. Solicitar cotizaci√≥n\n*3*. Casos de √©xito\n*4*. Volver al men√∫ principal',
      { capture: true },
      async (ctx, { flowDynamic, fallBack }) => {
        try {
          console.log('Procesando respuesta en el flujo de empresas - Paso 2');
          const chatId = ctx.from;
          const userResponse = ctx.body.trim();
          
          console.log(`Respuesta del usuario en el men√∫ de empresas: "${userResponse}"`);
          
          // Verificar si es seguro enviar un mensaje (anti-ban)
          if (!(await antibanUtils.isSafeToSendMessage(chatId))) {
            console.log('No es seguro enviar mensaje de respuesta, saltando');
            return;
          }
          
          // Procesar la respuesta del usuario
          switch (userResponse) {
            case '1':
              // Opci√≥n 1: Servicios para empresas
              console.log('Usuario eligi√≥ opci√≥n 1: Servicios para empresas');
              await applyRandomDelay(async () => {
                await flowDynamic(antibanUtils.sanitizeMessage(
                  "üìä *Nuestros Servicios para Empresas*\n\n" +
                  "‚Ä¢ Consultor√≠a estrat√©gica\n" +
                  "‚Ä¢ Desarrollo de software a medida\n" +
                  "‚Ä¢ Soluciones de marketing digital\n" +
                  "‚Ä¢ Optimizaci√≥n de procesos\n" +
                  "‚Ä¢ Capacitaci√≥n de personal\n\n" +
                  "¬øDeseas m√°s informaci√≥n sobre alg√∫n servicio espec√≠fico?"
                ));
              });
              await antibanUtils.registerMessageSent(chatId);
              break;
              
            case '2':
              // Opci√≥n 2: Solicitar cotizaci√≥n
              console.log('Usuario eligi√≥ opci√≥n 2: Solicitar cotizaci√≥n');
              await applyRandomDelay(async () => {
                await flowDynamic(antibanUtils.sanitizeMessage(
                  "üíº *Solicitud de Cotizaci√≥n*\n\n" +
                  "Para solicitar una cotizaci√≥n personalizada, por favor env√≠anos los siguientes datos:\n\n" +
                  "‚Ä¢ Nombre de la empresa\n" +
                  "‚Ä¢ Servicio que te interesa\n" +
                  "‚Ä¢ Breve descripci√≥n de tus necesidades\n\n" +
                  "Un asesor se pondr√° en contacto contigo a la brevedad."
                ));
              });
              await antibanUtils.registerMessageSent(chatId);
              break;
              
            case '3':
              // Opci√≥n 3: Casos de √©xito
              console.log('Usuario eligi√≥ opci√≥n 3: Casos de √©xito');
              await applyRandomDelay(async () => {
                await flowDynamic(antibanUtils.sanitizeMessage(
                  "üèÜ *Casos de √âxito*\n\n" +
                  "‚Ä¢ Empresa ABC: Incremento del 200% en ventas tras implementar nuestra estrategia de marketing.\n\n" +
                  "‚Ä¢ Corporaci√≥n XYZ: Reducci√≥n del 40% en costos operativos gracias a nuestra consultor√≠a.\n\n" +
                  "‚Ä¢ Startup 123: Lanzamiento exitoso con m√°s de 10,000 usuarios en el primer mes.\n\n" +
                  "Estos son solo algunos ejemplos de c√≥mo hemos ayudado a nuestros clientes a alcanzar sus objetivos."
                ));
              });
              await antibanUtils.registerMessageSent(chatId);
              break;
              
            case '4':
              // Opci√≥n 4: Volver al men√∫ principal
              console.log('Usuario eligi√≥ opci√≥n 4: Volver al men√∫ principal');
              await applyRandomDelay(async () => {
                await flowDynamic(antibanUtils.sanitizeMessage(
                  "üîÑ Volviendo al men√∫ principal...\n\nPor favor, escribe *hola* para ver el men√∫ principal."
                ));
              });
              await antibanUtils.registerMessageSent(chatId);
              break;
              
            default:
              // Opci√≥n no v√°lida
              console.log('Usuario eligi√≥ una opci√≥n no v√°lida:', userResponse);
              await applyRandomDelay(async () => {
                await flowDynamic(antibanUtils.sanitizeMessage(
                  "‚ö†Ô∏è Opci√≥n no v√°lida. Por favor, elige una opci√≥n del 1 al 4."
                ));
              });
              await antibanUtils.registerMessageSent(chatId);
              
              // Usar fallBack para volver a mostrar el men√∫ y esperar otra respuesta
              return fallBack();
          }
        } catch (error) {
          console.error('Error en el flujo de empresas (paso 2):', error);
          return fallBack();
        }
      }
    );
};

module.exports = createEmpresasFlow;